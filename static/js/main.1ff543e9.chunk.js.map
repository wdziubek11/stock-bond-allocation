{"version":3,"sources":["data/types.d.ts","GlobalStyles.tsx","theme.ts","data/sampleData.ts","data/StoreContext.tsx","data/query/usePortfolio.ts","view/PortfolioWidget/styledComponents.ts","components/InvestmentTypeAllocationWidget.tsx","data/query/useAllocationTotal.ts","view/PortfolioWidget/InvestmentAllocationRow/AllocationSlider.tsx","data/mutations/useAdjustAllocation.ts","view/PortfolioWidget/InvestmentAllocationRow/DeleteInvestment.tsx","data/mutations/useRemoveInvestmentFromPortfolio.ts","view/PortfolioWidget/InvestmentAllocationRow/InvestmentAllocationRow.tsx","view/PortfolioWidget/FooterRow/AllocationTotal.tsx","view/PortfolioWidget/FooterRow/FooterRow.tsx","data/query/useUnassignedInvestments.ts","data/query/useInvestments.ts","view/PortfolioWidget/AddInvestmentRow/AddInvestmentRow.tsx","data/mutations/useAddInvestmentToPortfolio.ts","view/PortfolioWidget/PortfolioWidget.tsx","view/PortfolioOverview.tsx","data/query/usePortfolioAllocation.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["InvestmentType","GlobalStyles","createGlobalStyle","theme","createMuiTheme","palette","primary","indigo","secondary","red","investments","id","name","assetClass","allocation","type","equity","percentage","bond","sampleData","portfolio","value","investment","Store","createContext","store","setStore","console","warn","StoreProvider","children","useState","Provider","useStore","useContext","usePortfolio","data","StyledRow","styled","div","StyledHeaderRow","InvestmentTypeAllocationWidget","investmentTypeAllocation","variant","hasOneType","useMemo","length","hasTwoTypes","getColor","useCallback","StyledContainer","className","StyledInnerContainer","StyledText","color","StyledIndicatorContainer","map","StyledIndicator","width","span","useAllocationTotal","reduce","acc","item","AllocationSlider","investmentAllocation","total","adjustAllocation","investmentId","isValidSelection","newValue","newAllocationValue","index","findIndex","adjustedAllocationValue","allocationCopy","useAdjustAllocation","setValue","useEffect","handleOnChange","_e","Slider","valueLabelDisplay","onChange","DeleteInvestment","removeInvestmentFromPortfolio","filter","useRemoveInvestmentFromPortfolio","Button","onClick","InvestmentAllocationRow","StyledInvestmentRow","AllocationTotal","StyledErrorText","FooterRow","useUnassignedInvestments","usedInvestmentIds","includes","AddInvestmentRow","unassignedInvestments","addInvestmentToPortfolio","newInvestment","find","useAddInvestmentToPortfolio","active","setActive","handleOnAddInvestmentClick","e","target","Select","defaultValue","MenuItem","PortfolioWidget","PortfolioOverview","overallAllocationMap","investmentAllocationMap","key","entityType","weightedValue","Object","keys","Math","round","usePortfolioAllocation","StyledEquity","StyledBondLabel","StyleText","App","StylesProvider","injectFirst","ThemeProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1ff543e9.chunk.js","sourcesContent":["export enum InvestmentType {\n  equity = 'equity',\n  bond = 'bond',\n}\n\nexport interface InvestmentTypeAllocation {\n  type: InvestmentType;\n  percentage: number;\n}\n\nexport interface Investment {\n  id: number;\n  name: string;\n  allocation: Array<InvestmentTypeAllocation>;\n  assetClass: string;\n}\n\nexport interface InvestmentAllocation {\n  investment: Investment;\n  percentage: number;\n}\n\nexport interface Portfolio {\n  name: string;\n  allocation: Array<InvestmentAllocation>;\n  value: number;\n}\n","import { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyles = createGlobalStyle`\nhtml, body, #root {\n  height: 100%;\n}\n\nbody {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto',\n    'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans',\n    'Helvetica Neue', sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n`;\n","import { createMuiTheme } from '@material-ui/core/styles';\nimport indigo from '@material-ui/core/colors/blueGrey';\nimport red from '@material-ui/core/colors/red';\n\nexport const theme = createMuiTheme({\n  palette: {\n    primary: indigo,\n    secondary: red,\n  },\n});\n","import { InvestmentType } from './types.d';\n\nconst investments = [\n  {\n    id: 1,\n    name: 'Fidelity International Index',\n    assetClass: 'International Funds',\n    allocation: [\n      { type: InvestmentType.equity, percentage: 99 },\n      { type: InvestmentType.bond, percentage: 1 },\n    ],\n  },\n  {\n    id: 2,\n    name: 'Fidelity Small Cap Index',\n    assetClass: 'Small Cap Funds',\n    allocation: [\n      { type: InvestmentType.equity, percentage: 99 },\n      { type: InvestmentType.bond, percentage: 1 },\n    ],\n  },\n  {\n    id: 3,\n    name: 'Fidelity Mid Cap Index',\n    assetClass: 'Mid Cap Funds',\n    allocation: [{ type: InvestmentType.equity, percentage: 100 }],\n  },\n  {\n    id: 4,\n    name: 'Fidelity 500 Index',\n    assetClass: 'Large Cap Funds',\n    allocation: [{ type: InvestmentType.equity, percentage: 100 }],\n  },\n  {\n    id: 5,\n    name: 'Fidelity US Bond Index',\n    assetClass: 'International Funds',\n    allocation: [\n      { type: InvestmentType.equity, percentage: 1 },\n      { type: InvestmentType.bond, percentage: 99 },\n    ],\n  },\n];\n\nexport const sampleData = {\n  investments: investments,\n  portfolio: {\n    name: 'My Portfolio',\n    value: 10000,\n    allocation: [\n      {\n        investment: investments[0],\n        percentage: 15,\n      },\n      {\n        investment: investments[1],\n        percentage: 24,\n      },\n      {\n        investment: investments[2],\n        percentage: 21,\n      },\n      {\n        investment: investments[3],\n        percentage: 30,\n      },\n      {\n        investment: investments[4],\n        percentage: 10,\n      },\n    ],\n  },\n};\n","import { createContext, useContext, useState } from 'react';\n\nimport { Portfolio, Investment } from './types.d';\nimport { sampleData } from './sampleData';\n\ninterface StoreInterface {\n  portfolio: Portfolio;\n  investments: Array<Investment>;\n}\n\ninterface StoreContext {\n  store: StoreInterface;\n  setStore: React.Dispatch<React.SetStateAction<StoreInterface>>;\n}\n\nconst Store = createContext<StoreContext>({\n  store: sampleData,\n  setStore: () =>\n    console.warn('You need to enclose your application with StoreProvider'),\n});\n\ninterface StoreProviderProps {\n  children: React.ReactNode;\n}\n\nexport const StoreProvider = ({ children }: StoreProviderProps) => {\n  const [store, setStore] = useState<StoreInterface>(sampleData);\n\n  const value = {\n    store,\n    setStore,\n  };\n\n  return <Store.Provider value={value}>{children}</Store.Provider>;\n};\n\nexport const useStore = () => useContext(Store);\n","import { useStore } from '../StoreContext';\n\nexport const usePortfolio = () => {\n  const { store } = useStore();\n\n  return { data: store.portfolio };\n};\n","import styled from 'styled-components';\n\nexport const StyledRow = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex: 1;\n  align-items: center;\n  & > div {\n    margin: 1.5rem 1rem;\n    flex: 1;\n    justify-content: flex-start;\n\n    &.center {\n      justify-content: center;\n      text-align: center;\n    }\n  }\n`;\n\nexport const StyledHeaderRow = styled(StyledRow)`\n  font-weight: bold;\n  border-bottom: 1px solid black;\n`;\n","import { useCallback, useMemo } from 'react';\nimport { InvestmentTypeAllocation, InvestmentType } from '../data/types.d';\nimport styled from 'styled-components';\n\ninterface InvestmentTypeAllocationWidgetProps {\n  investmentTypeAllocation: Array<InvestmentTypeAllocation>;\n  variant?: 'large' | 'small';\n}\n\nexport const InvestmentTypeAllocationWidget = ({\n  investmentTypeAllocation,\n  variant,\n}: InvestmentTypeAllocationWidgetProps) => {\n  const hasOneType = useMemo(() => investmentTypeAllocation.length === 1, [\n    investmentTypeAllocation,\n  ]);\n\n  const hasTwoTypes = useMemo(() => investmentTypeAllocation.length === 2, [\n    investmentTypeAllocation,\n  ]);\n\n  const getColor = useCallback(\n    (type) =>\n      type === InvestmentType.equity ? 'dodgerblue' : 'mediumseagreen',\n    []\n  );\n\n  return (\n    <StyledContainer className=\"center\">\n      <StyledInnerContainer>\n        {hasTwoTypes ? (\n          <StyledText\n            variant={variant}\n            color={getColor(investmentTypeAllocation[0].type)}\n          >\n            {investmentTypeAllocation[0].percentage}\n          </StyledText>\n        ) : (\n          <StyledText />\n        )}\n        <StyledIndicatorContainer variant={variant}>\n          {investmentTypeAllocation.map((allocation) => (\n            <StyledIndicator\n              key={allocation.type}\n              width={`${allocation.percentage}%`}\n              color={getColor(allocation.type)}\n            >\n              {hasOneType && <span>{allocation.percentage}</span>}\n            </StyledIndicator>\n          ))}\n        </StyledIndicatorContainer>\n        {hasTwoTypes ? (\n          <StyledText\n            variant={variant}\n            color={getColor(investmentTypeAllocation[1].type)}\n          >\n            {investmentTypeAllocation[1].percentage}\n          </StyledText>\n        ) : (\n          <StyledText />\n        )}\n      </StyledInnerContainer>\n    </StyledContainer>\n  );\n};\n\nconst StyledContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst StyledInnerContainer = styled.div`\n  display: flex;\n  flex: 1;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n`;\n\ninterface StyledIndicatorContainerProps {\n  variant?: InvestmentTypeAllocationWidgetProps['variant'];\n}\n\nconst StyledIndicatorContainer = styled.div<StyledIndicatorContainerProps>`\n  width: ${({ variant }) => (variant === 'large' ? '40rem' : '4rem')};\n  height: ${({ variant }) => (variant === 'large' ? '4rem' : '1.25rem')};\n  display: flex;\n  flex-direction: row;\n  background: lightgray;\n`;\n\ninterface StyledIndicatorProps {\n  width: string;\n}\n\nconst StyledIndicator = styled.div<StyledIndicatorProps>`\n  width: ${({ width }) => `${width}`};\n  height: 100%;\n  background-color: ${({ color }) => color};\n  overflow: hidden;\n  color: white;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 0.8rem;\n`;\n\ninterface StyledTextProps {\n  variant?: InvestmentTypeAllocationWidgetProps['variant'];\n  color?: string;\n}\n\nconst StyledText = styled.span<StyledTextProps>`\n  font-size: ${({ variant }) => (variant === 'large' ? '1.5rem' : '0.8rem')};\n  width: ${({ variant }) => (variant === 'large' ? '3rem' : '1.5rem')};\n  text-align: center;\n  color: ${({ color }) => color};\n  font-weight: bold;\n`;\n","import { useMemo } from 'react';\nimport { usePortfolio } from './usePortfolio';\n\nexport const useAllocationTotal = () => {\n  const { data: portfolio } = usePortfolio();\n\n  const total = useMemo(() => {\n    return portfolio.allocation.reduce((acc, item) => acc + item.percentage, 0);\n  }, [portfolio]);\n\n  return { data: total };\n};\n","import { useState, useEffect } from 'react';\nimport Slider from '@material-ui/core/Slider';\nimport styled from 'styled-components';\nimport { InvestmentAllocation } from '../../../data/types';\n\nimport { useAdjustAllocation } from '../../../data/mutations/useAdjustAllocation';\nimport { useCallback } from 'react';\nimport { useAllocationTotal } from '../../../data/query/useAllocationTotal';\n\ninterface AllocationSliderProps {\n  investmentAllocation: InvestmentAllocation;\n}\n\nexport const AllocationSlider = ({\n  investmentAllocation,\n}: AllocationSliderProps) => {\n  const { data: total } = useAllocationTotal();\n  const { adjustAllocation } = useAdjustAllocation({\n    investmentId: investmentAllocation.investment.id,\n  });\n\n  const [value, setValue] = useState(investmentAllocation.percentage);\n\n  useEffect(() => {\n    setValue(investmentAllocation.percentage);\n  }, [investmentAllocation.percentage]);\n\n  const handleOnChange = useCallback(\n    (_e, newValue) => {\n      adjustAllocation({\n        newAllocationValue: newValue,\n      });\n    },\n    [adjustAllocation]\n  );\n\n  return (\n    <StyledContainer>\n      <Slider\n        color={total < 100 ? 'secondary' : 'primary'}\n        value={value}\n        valueLabelDisplay=\"on\"\n        onChange={handleOnChange}\n      />\n    </StyledContainer>\n  );\n};\n\nconst StyledContainer = styled.div`\n  width: 5rem;\n`;\n","import { useCallback } from 'react';\nimport { useStore } from '../StoreContext';\nimport { usePortfolio } from '../query/usePortfolio';\nimport { useAllocationTotal } from '../query/useAllocationTotal';\nimport { InvestmentAllocation } from '../types';\n\ninterface useAdjustAllocationParams {\n  investmentId: number;\n}\n\nexport const useAdjustAllocation = ({\n  investmentId,\n}: useAdjustAllocationParams) => {\n  const { data: portfolio } = usePortfolio();\n  const { setStore, store } = useStore();\n  const { data: total } = useAllocationTotal();\n\n  const isValidSelection = useCallback(\n    (newValue: number, investmentAllocation: InvestmentAllocation) =>\n      total - investmentAllocation.percentage + newValue <= 100,\n    [total]\n  );\n\n  const adjustAllocation = useCallback(\n    ({ newAllocationValue }) => {\n      const index = portfolio.allocation.findIndex(\n        (item) => item.investment.id === investmentId\n      );\n      const investmentAllocation = portfolio.allocation[index];\n\n      // make sure it's a valid selection or revert to maximum value.\n      const adjustedAllocationValue = isValidSelection(\n        newAllocationValue,\n        investmentAllocation\n      )\n        ? newAllocationValue\n        : 100 - (total - investmentAllocation.percentage);\n\n      const allocationCopy = [...portfolio.allocation];\n      allocationCopy[index] = {\n        ...allocationCopy[index],\n        percentage: adjustedAllocationValue,\n      };\n\n      setStore({\n        ...store,\n        portfolio: {\n          ...portfolio,\n          allocation: allocationCopy,\n        },\n      });\n    },\n    [investmentId, setStore, store, portfolio, isValidSelection, total]\n  );\n\n  return { adjustAllocation };\n};\n","import Button from '@material-ui/core/Button';\nimport { useRemoveInvestmentFromPortfolio } from '../../../data/mutations/useRemoveInvestmentFromPortfolio';\n\ninterface DeleteInvestmentProps {\n  investmentId: number;\n}\n\nexport const DeleteInvestment = ({ investmentId }: DeleteInvestmentProps) => {\n  const { removeInvestmentFromPortfolio } = useRemoveInvestmentFromPortfolio({\n    investmentId,\n  });\n\n  return (\n    <div className=\"remove-button center\">\n      <Button\n        color=\"secondary\"\n        variant=\"contained\"\n        onClick={removeInvestmentFromPortfolio}\n      >\n        x\n      </Button>\n    </div>\n  );\n};\n","import { useCallback } from 'react';\nimport { useStore } from '../StoreContext';\n\nexport const useRemoveInvestmentFromPortfolio = ({\n  investmentId,\n}: {\n  investmentId: number;\n}) => {\n  const { setStore, store } = useStore();\n\n  const removeInvestmentFromPortfolio = useCallback(() => {\n    setStore({\n      ...store,\n      portfolio: {\n        ...store.portfolio,\n        allocation: store.portfolio.allocation.filter(\n          (item) => item.investment.id !== investmentId\n        ),\n      },\n    });\n  }, [store, setStore, investmentId]);\n\n  return { removeInvestmentFromPortfolio };\n};\n","import styled from 'styled-components';\n\nimport { InvestmentAllocation } from '../../../data/types';\nimport { StyledRow } from '../styledComponents';\n\nimport { InvestmentTypeAllocationWidget } from '../../../components/InvestmentTypeAllocationWidget';\nimport { AllocationSlider } from './AllocationSlider';\nimport { DeleteInvestment } from './DeleteInvestment';\n\ninterface InvestmentRowProps {\n  investmentAllocation: InvestmentAllocation;\n}\n\nexport const InvestmentAllocationRow = ({\n  investmentAllocation,\n}: InvestmentRowProps) => {\n  const {\n    investment: { id, name, assetClass, allocation: investmentTypeAllocation },\n  } = investmentAllocation;\n\n  return (\n    <StyledInvestmentRow>\n      <div>{name}</div>\n      <InvestmentTypeAllocationWidget\n        investmentTypeAllocation={investmentTypeAllocation}\n      />\n      <div>{assetClass}</div>\n      <AllocationSlider investmentAllocation={investmentAllocation} />\n      <DeleteInvestment investmentId={id} />\n    </StyledInvestmentRow>\n  );\n};\n\nconst StyledInvestmentRow = styled(StyledRow)`\n  padding-top: 1rem;\n  & > .remove-button {\n    opacity: 0;\n    transition: opacity 0.2s ease;\n  }\n  :hover {\n    .remove-button {\n      opacity: 1;\n    }\n  }\n`;\n","import styled from 'styled-components';\nimport { useAllocationTotal } from '../../../data/query/useAllocationTotal';\n\nexport const AllocationTotal = () => {\n  const { data: total } = useAllocationTotal();\n\n  return (\n    <div>\n      <h3>{`Total: ${total} `}</h3>\n      <StyledErrorText>\n        {total < 100 ? '(needs to add up to 100)' : ''}\n      </StyledErrorText>\n    </div>\n  );\n};\n\nconst StyledErrorText = styled.div`\n  color: red;\n`;\n","import { StyledRow } from '../styledComponents';\nimport { AllocationTotal } from './AllocationTotal';\n\nexport const FooterRow = () => {\n  return (\n    <StyledRow>\n      <div />\n      <div />\n      <div />\n      <AllocationTotal />\n      <div />\n    </StyledRow>\n  );\n};\n","import { useMemo } from 'react';\nimport { useInvestments } from './useInvestments';\nimport { usePortfolio } from './usePortfolio';\n\nexport const useUnassignedInvestments = () => {\n  const { data: portfolio } = usePortfolio();\n  const { data: investments } = useInvestments();\n\n  const usedInvestmentIds = useMemo(\n    () => portfolio.allocation.map((item) => item.investment.id),\n    [portfolio.allocation]\n  );\n\n  const unassignedInvestments = useMemo(\n    () =>\n      investments.filter(\n        (investment) => !usedInvestmentIds.includes(investment.id)\n      ),\n    [investments, usedInvestmentIds]\n  );\n\n  return { data: unassignedInvestments };\n};\n","import { useStore } from '../StoreContext';\n\nexport const useInvestments = () => {\n  const { store } = useStore();\n\n  return { data: store.investments };\n};\n","import { useCallback, useState, useEffect } from 'react';\nimport { StyledRow } from '../styledComponents';\nimport Button from '@material-ui/core/Button';\nimport { useUnassignedInvestments } from '../../../data/query/useUnassignedInvestments';\nimport Select from '@material-ui/core/Select';\nimport { useAddInvestmentToPortfolio } from '../../../data/mutations/useAddInvestmentToPortfolio';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nexport const AddInvestmentRow = () => {\n  const { data: unassignedInvestments } = useUnassignedInvestments();\n  const { addInvestmentToPortfolio } = useAddInvestmentToPortfolio();\n  const [active, setActive] = useState(false);\n\n  useEffect(() => {\n    setActive(false);\n  }, [unassignedInvestments]);\n\n  const handleOnAddInvestmentClick = useCallback(() => {\n    setActive(true);\n  }, []);\n\n  const handleOnChange = useCallback(\n    (e) => {\n      const { value } = e.target;\n      addInvestmentToPortfolio({ investmentId: value });\n    },\n    [addInvestmentToPortfolio]\n  );\n\n  return unassignedInvestments.length ? (\n    <StyledRow>\n      {active ? (\n        <Select defaultValue=\"\" onChange={handleOnChange}>\n          <MenuItem value=\"\">Please select investment</MenuItem>\n          {unassignedInvestments.map(({ id, name }) => (\n            <MenuItem key={id} value={id}>\n              {name}\n            </MenuItem>\n          ))}\n        </Select>\n      ) : (\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={handleOnAddInvestmentClick}\n        >\n          + Add Investment\n        </Button>\n      )}\n      <div />\n      <div />\n      <div />\n      <div />\n    </StyledRow>\n  ) : null;\n};\n","import { useCallback } from 'react';\nimport { useStore } from '../StoreContext';\n\nexport const useAddInvestmentToPortfolio = () => {\n  const { setStore, store } = useStore();\n\n  const addInvestmentToPortfolio = useCallback(\n    ({ investmentId }: { investmentId: number }) => {\n      const newInvestment = store.investments.find(\n        (investment) => investment.id === investmentId\n      );\n\n      if (newInvestment) {\n        setStore({\n          ...store,\n          portfolio: {\n            ...store.portfolio,\n            allocation: [\n              ...store.portfolio.allocation,\n              {\n                investment: newInvestment,\n                percentage: 0,\n              },\n            ],\n          },\n        });\n      }\n    },\n    [store, setStore]\n  );\n\n  return { addInvestmentToPortfolio };\n};\n","import { usePortfolio } from '../../data/query/usePortfolio';\nimport styled from 'styled-components';\n\nimport { InvestmentAllocationRow } from './InvestmentAllocationRow';\nimport { StyledHeaderRow } from './styledComponents';\nimport { FooterRow } from './FooterRow';\nimport { AddInvestmentRow } from './AddInvestmentRow';\n\nexport const PortfolioWidget = () => {\n  const { data: portfolio } = usePortfolio();\n\n  return portfolio ? (\n    <StyledContainer>\n      <StyledHeaderRow>\n        <div>INVESTMENT</div>\n        <div className=\"center\">MIX</div>\n        <div>ASSET CLASS</div>\n        <div className=\"center\">ALLOCATION</div>\n        <div />\n      </StyledHeaderRow>\n      {portfolio.allocation.map((investmentAllocation) => {\n        return (\n          <InvestmentAllocationRow\n            key={investmentAllocation.investment.id}\n            investmentAllocation={investmentAllocation}\n          />\n        );\n      })}\n      <AddInvestmentRow />\n      <FooterRow />\n    </StyledContainer>\n  ) : null;\n};\n\nconst StyledContainer = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n`;\n","import { usePortfolio } from '../data/query/usePortfolio';\nimport styled from 'styled-components';\nimport { usePortfolioAllocation } from '../data/query/usePortfolioAllocation';\nimport { InvestmentTypeAllocationWidget } from '../components/InvestmentTypeAllocationWidget';\n\nexport const PortfolioOverview = () => {\n  const { data: portfolio } = usePortfolio();\n  const { data: investmentTypeAllocation } = usePortfolioAllocation();\n\n  return (\n    <>\n      <h2>{portfolio.name}</h2>\n      <StyledContainer>\n        <StyledEquity>Equities</StyledEquity>\n        <InvestmentTypeAllocationWidget\n          variant=\"large\"\n          investmentTypeAllocation={investmentTypeAllocation}\n        />\n        <StyledBondLabel>Bonds</StyledBondLabel>\n      </StyledContainer>\n    </>\n  );\n};\n\nconst StyledContainer = styled.div`\n  display: flex;\n  flex: 1;\n  justify-content: space-evenly;\n  align-items: center;\n  height: 3rem;\n  max-width: 50rem;\n  margin: 2rem auto;\n`;\n\nconst StyleText = styled.span`\n  font-size: 1.5rem;\n  font-weight: bold;\n`;\n\nconst StyledEquity = styled(StyleText)`\n  color: dodgerblue;\n`;\n\nconst StyledBondLabel = styled(StyleText)`\n  color: mediumseagreen;\n`;\n","import { useMemo } from 'react';\nimport { InvestmentType } from '../types';\nimport { usePortfolio } from './usePortfolio';\n\ntype InvestmentKeyType = {\n  [name in InvestmentType]: number;\n};\n\nexport const usePortfolioAllocation = () => {\n  const { data: portfolio } = usePortfolio();\n\n  const portfolioAllocation = useMemo(() => {\n    const overallAllocationMap = portfolio.allocation.reduce((acc, item) => {\n      const investmentAllocationMap = item.investment.allocation.reduce(\n        (investmentAllocationMap, investmentAllocation) => {\n          investmentAllocationMap[investmentAllocation.type] =\n            investmentAllocation.percentage;\n          return investmentAllocationMap;\n        },\n        {} as InvestmentKeyType\n      );\n\n      for (let key in investmentAllocationMap) {\n        const entityType = key as InvestmentType;\n        const weightedValue =\n          (investmentAllocationMap[entityType] * item.percentage) / 100;\n        acc[entityType] =\n          typeof acc[entityType] !== 'undefined'\n            ? acc[entityType] + weightedValue\n            : weightedValue;\n      }\n      return acc;\n    }, {} as InvestmentKeyType);\n\n    return Object.keys(overallAllocationMap).map((type) => ({\n      type: type as InvestmentType,\n      percentage: Math.round(\n        overallAllocationMap[type as InvestmentType]\n      ) as number,\n    }));\n  }, [portfolio.allocation]);\n\n  return { data: portfolioAllocation };\n};\n","import { GlobalStyles } from './GlobalStyles';\nimport { StylesProvider, ThemeProvider } from '@material-ui/core/styles';\nimport { theme } from './theme';\nimport { StoreProvider } from './data/StoreContext';\nimport { PortfolioWidget } from './view/PortfolioWidget';\nimport { PortfolioOverview } from './view/PortfolioOverview';\nimport styled from 'styled-components';\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyles />\n      <StylesProvider injectFirst>\n        <ThemeProvider theme={theme}>\n          <StyledContainer className=\"App\">\n            <StoreProvider>\n              <PortfolioOverview />\n              <PortfolioWidget />\n            </StoreProvider>\n          </StyledContainer>\n        </ThemeProvider>\n      </StylesProvider>\n    </>\n  );\n}\n\nexport default App;\n\nconst StyledContainer = styled.div`\n  padding: 2rem;\n  width: 75%;\n  margin: auto;\n`;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}